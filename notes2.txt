
data.json  <- keeps data persistance allowing server update from app
index.js(node.js server) <-uses data.json(which server uses to store updates)


TimersDashboard <-responsible for keeping state not the server.
                timer(creation,updating,deletion,start,stop)

server <- request timers
        request localhost.
        returns html.index(loading react.js(only communicates json))

JSON endpoints check server.js  
        give "http://localhost:3000/api/timers" to see all timers


__Loading state from the server app-8.js ..getTimers()

__Sending starts and stops to the server app-9.js..startTimer() & stopTimer()
  *optimistc updating= locally client updating before the server(testing but dou
  -ble effort)

__Sending crud to the server .. app-complete.js











*******************JSX(js syntax extension) and Virtual DOM(API)'''''''''''''''''''''''''''


*write own tags!!
*JSX == js(compiled(transpile(Babel)))

react(ownDomRepresentation(Virtual) != browserDom){
        dev.manipulate(Virtual) = react.browserDom(manipulate);
}
DOM = querySelector && getElementById;
DOM == !keepingTrack && slow;

Virtual DOM != DOM; VirtualDOM == simulation(ReactElement(DomRepresentation));


*open jsx/basic/index.html <- inspector
in console type = -var boldElement = React.createElement('b');
                  -boldElement

boldElement <-exists as a ghost(emptyElement) 

in console type = var mountElement = document.getElementById('root');
in console type =  var mountElement = document.querySelector('#root');
in console type = ReactDOM.render(boldElement, mountElement);




AddingText(with children)________ smallComponent? doIt : donT; _____________________



React.createElement(DomElementType, props, children(OfElement)) <--immutable though
 
 * children(OfElement) == ReactNode(ReactElement, string||number, [ReactNodes]);
bsp in console:

  var mountElement = document.querySelector('#root');
  var boldElement = React.createElement('b', null, "Text (as a string)");
  ReactDOM.render(boldElement, mountElement);

ReactDOM.render <- thirdArgumentOptional(function(){})





JSX createElement()______________________________

var boldElement = <b>Text (as a string) </b>;  <- ReactElement
bsp: const Element = <div>HELLO </div>; //upperCase(accepted)

const Message = prop => (<div>{props.text}</div>))
const ReactComponent = (Message text= "HELLO"/>);

JSX Attribute Expressions______________________________

const warningLevel = 'debug';
const component = (<Alert
                   color={war === 'debug' ? 'grey' : 'red'}
                   log={true} />)


JSX conditionalChildExpressions______________________________


bsp:
const renderAdminMenu = function(){
        return(<MenuLink to="/users>User Accounts</MenuLink>)
}
const userLebel = this.props.userLebel;
return( 
        <ul>
        <li>Menu</li>
        {userLebel === 'admin' && renderAdminMenu()}
        </ul>
)

bsp:

const Menu = (<ul>{loggedInUser ? <userMenu /> : <LoginLink />}</ul>)
bsp



JSX booleanAttributes__________________________________________
 bsp:

 <input name='Name' disabled={true} />   or js variableWay
 var formDisabled = true; 
 <input name='Name' disabled={formDisabled}/>

 JSX Comments {/* */}

JSX spread syntax(...):______________________________
bsp:  //object with 2 keys
    const props = {msg: "Hello", recipent: "World"}
      //pass props individually
<Component msg = {"Hello"} recipent={"World"} />
  //in use

<Component {...props} /> 

JSX Gotchas_________________________
no class="" instead className="" for CSS(npm package classnames)
bsp:
var cssNames = ['one','two']
(<div className={cssNames.join(' ')}></div>)  //joining the array














pg 170